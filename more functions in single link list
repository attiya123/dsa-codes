#include <iostream>
using namespace std;

// Define a Node
struct Node {
    int data;
    Node* next;
};

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->next = nullptr;
    return newNode;
}

// Function to insert a node at the end
void insertAtEnd(Node*& head, int data) {
    Node* newNode = createNode(data);
    if (!head) {
        head = newNode;
        return;
    }
    Node* temp = head;
    while (temp->next) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to insert after a specific position
void insertAfterPosition(Node*& head, int position, int data) {
    if (!head) {
        cout << "List is empty.\n";
        return;
    }
    Node* temp = head;
    int index = 0;

    while (temp && index < position) {
        temp = temp->next;
        index++;
    }
    if (!temp) {
        cout << "Position out of range.\n";
        return;
    }
    Node* newNode = createNode(data);
    newNode->next = temp->next;
    temp->next = newNode;
}

// Function to delete the tail node
void deleteTail(Node*& head) {
    if (!head) {
        cout << "List is empty.\n";
        return;
    }
    if (!head->next) { // If there's only one node
        delete head;
        head = nullptr;
        return;
    }
    Node* temp = head;
    while (temp->next && temp->next->next) {
        temp = temp->next;
    }
    delete temp->next;
    temp->next = nullptr;
}

// Function to reverse the linked list
void reverseList(Node*& head) {
    Node* prev = nullptr;
    Node* current = head;
    Node* next = nullptr;

    while (current) {
        next = current->next; // Store the next node
        current->next = prev; // Reverse the current node
        prev = current;       // Move prev to current
        current = next;       // Move current to next
    }
    head = prev; // Update head to the new first node
}

// Function to display the list
void displayList(Node* head) {
    if (!head) {
        cout << "List is empty.\n";
        return;
    }
    Node* temp = head;
    while (temp) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

// Main Function
int main() {
    Node* head = nullptr;

    // Inserting nodes
    insertAtEnd(head, 10);
    insertAtEnd(head, 20);
    insertAtEnd(head, 30);
    insertAtEnd(head, 40);

    cout << "Original List: ";
    displayList(head);

    // Insert after position
    insertAfterPosition(head, 2, 25);
    cout << "After Inserting 25 after position 2: ";
    displayList(head);

    // Delete tail
    deleteTail(head);
    cout << "After Deleting Tail: ";
    displayList(head);

    // Reverse list
    reverseList(head);
    cout << "After Reversing the List: ";
    displayList(head);

    return 0;
}
